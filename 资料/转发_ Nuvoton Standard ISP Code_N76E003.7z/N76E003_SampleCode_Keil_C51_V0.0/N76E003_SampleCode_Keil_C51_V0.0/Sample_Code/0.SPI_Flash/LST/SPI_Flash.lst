C51 COMPILER V9.52.0.0   SPI_FLASH                                                         09/01/2016 17:27:30 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SPI_FLASH
OBJECT MODULE PLACED IN .\Output\SPI_Flash.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\SPI_Flash.c BROWSE INCDIR(..\..\Include) DEFINE(FOSC_221184) DEBUG OBJ
                    -ECTEXTEND PRINT(.\LST\SPI_Flash.lst) TABS(2) OBJECT(.\Output\SPI_Flash.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2015 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp. 
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Apr/21/2015
  12          //********************************************************************************************************
             -***
  13          
  14          //********************************************************************************************************
             -***
  15          //  File Function: N76E885 Access SPI Flash (W25Q16BV) demo code
  16          //********************************************************************************************************
             -***
  17          
  18          #include <stdio.h>
  19          #include "N76E003.h"
  20          #include "Define.h"
  21          #include "Common.h"
  22          #include "Delay.h"
  23          #include "SFR_Macro.h"
  24          #include "Function_define.h"
  25          
  26          /*
  27          //-------- <<< Use Configuration Wizard in Context Menu >>> ------------
  28          //
  29          //<e0> System Clock Source Configuration
  30          // <o1> System Clock Source Selection
  31          //      <0=> 2~25MHz    XTAL
  32          //      <1=> 32.768KHz  XTAL
  33          //      <2=> 22.1184MHz Internal
  34          //      <3=> 10KHz      Internal
  35          //      <4=> OSC-In     External
  36          //</e>
  37          //
  38          //<e2> Clock Divider Configuration
  39          //     <o3.0..7>  System Clock Source Devider <1-255>
  40          //                     <i> Fsys = (System Clock Source) / (2 * Devider)
  41          //</e>
  42          //
  43          // <o4> SPI Clock Rate Selection (11.0592MHz System Clock)
  44          //                  <0=>  2.7648MHz, Fosc/4 
  45          //                  <1=>  1.3824MHz, Fosc/8 
C51 COMPILER V9.52.0.0   SPI_FLASH                                                         09/01/2016 17:27:30 PAGE 2   

  46          //                  <2=>  0.6912MHz, Fosc/16
  47          //                  <3=>  0.3456MHz, Fosc/32
  48          //-------- <<< end of configuration section >>> ------------------------------
  49          */
  50          
  51          #define SYS_CLK_EN      0
  52          #define SYS_SEL         2
  53          #define SYS_DIV_EN      0                   //0: Fsys=Fosc, 1: Fsys = Fosc/(2*CKDIV)
  54          #define SYS_DIV         1
  55          #define SPI_CLOCK       0
  56          
  57          #define SS_PIN          P04
  58          #define WRITE_ENABLE    0x06
  59          #define WRITE_DISABLE   0x04
  60          #define READ_DATA       0x03
  61          #define PAGE_PROGRAM    0x02
  62          #define CHIP_ERASE      0xC7
  63          #define READ_STATUS1    0x05
  64          
  65          //--------------------------------------------------------------------------------------------------------
             ----
  66          void SPI_Error(void)
  67          {
  68   1          printf ("\n*  SPI Error, please check the connection between MCU and SPI Flash");
  69   1          while(1);
  70   1      }
  71          //--------------------------------------------------------------------------------------------------------
             ----
  72          void SPI_Initial(void)
  73          {
  74   1          #if   SPI_CLOCK == 0
  75   1                  clr_SPR1;
  76   1                  clr_SPR0;
  77   1          #elif SPI_CLOCK == 1
                          clr_SPR1;
                          set_SPR0;
                  #elif SPI_CLOCK == 2
                          set_SPR1;  
                          clr_SPR0;
                  #elif SPI_CLOCK == 3
                          set_SPR1;
                          set_SPR0;
                  #endif
  87   1      
  88   1          /* /SS General purpose I/O ( No Mode Fault ) */
  89   1          set_DISMODF;
  90   1          clr_SSOE;
  91   1      
  92   1          /* SPI in Master mode */
  93   1          set_MSTR;
  94   1      
  95   1          /* MSB first */
  96   1          clr_LSBFE;
  97   1      
  98   1          clr_CPOL;
  99   1          clr_CPHA;
 100   1          
 101   1          /* Enable SPI function */
 102   1          set_SPIEN;
 103   1      }
 104          //--------------------------------------------------------------------------------------------------------
             ----
C51 COMPILER V9.52.0.0   SPI_FLASH                                                         09/01/2016 17:27:30 PAGE 3   

 105          void Read_MID_DID(UINT8 *pu8MID,UINT8 *pu8DID)
 106          {
 107   1          SS_PIN = 0;
 108   1          SPDR = 0x90;
 109   1          while((SPSR&0x80)==0x00);
 110   1          clr_SPIF;
 111   1      
 112   1          SPDR = 0x00;
 113   1          while((SPSR&0x80)==0x00);
 114   1          clr_SPIF;
 115   1      
 116   1          SPDR = 0x00;
 117   1          while((SPSR&0x80)==0x00);
 118   1          clr_SPIF;
 119   1      
 120   1          SPDR = 0x00;
 121   1          while((SPSR&0x80)==0x00);
 122   1          clr_SPIF;
 123   1      
 124   1          SPDR = 0xFF;
 125   1          while((SPSR&0x80)==0x00);
 126   1          *pu8MID = SPDR;
 127   1          clr_SPIF;
 128   1      
 129   1          SPDR = 0xFF;
 130   1          while((SPSR&0x80)==0x00);
 131   1          *pu8DID = SPDR;
 132   1          clr_SPIF;
 133   1          SS_PIN = 1;    
 134   1      
 135   1      ////    SS_PIN = 0;
 136   1      ////    SPDR = 0x90;
 137   1      ////    while((SPSR&0x80)==0);
 138   1      ////    clr_SPIF;
 139   1      
 140   1      ////    SPDR = 0x00;
 141   1      ////    while((SPSR&0x80)==0);
 142   1      ////    clr_SPIF;
 143   1      
 144   1      ////    SPDR = 0x00;
 145   1      ////    while((SPSR&0x80)==0);
 146   1      ////    clr_SPIF;
 147   1      
 148   1      ////    SPDR = 0x00;
 149   1      ////    while((SPSR&0x80)==0);
 150   1      ////    clr_SPIF;
 151   1      
 152   1      ////    SPDR = 0xFF;
 153   1      ////    while((SPSR&0x80)==0);
 154   1      ////    *pu8MID = SPDR;
 155   1      ////    clr_SPIF;
 156   1      
 157   1      ////    SPDR = 0xFF;
 158   1      ////    while((SPSR&0x80)==0);
 159   1      ////    *pu8DID = SPDR;
 160   1      ////    clr_SPIF;
 161   1      ////    SS_PIN = 1;
 162   1      
 163   1      
 164   1      }
 165          //--------------------------------------------------------------------------------------------------------
             ----
C51 COMPILER V9.52.0.0   SPI_FLASH                                                         09/01/2016 17:27:30 PAGE 4   

 166          void Flash_Write_Enable(void)
 167          {
 168   1          SS_PIN = 0;
 169   1          SPDR = WRITE_ENABLE;
 170   1          while((SPSR&0x80)==0x00);
 171   1          clr_SPIF;
 172   1          SS_PIN = 1;    
 173   1      }
 174          //--------------------------------------------------------------------------------------------------------
             ----
 175          void Flash_Write_Disable(void)
 176          {
 177   1          SS_PIN = 0;
 178   1          SPDR = WRITE_DISABLE;
 179   1          while((SPSR&0x80)==0x00);
 180   1          clr_SPIF;
 181   1          SS_PIN = 1;    
 182   1      }
 183          //--------------------------------------------------------------------------------------------------------
             ----
 184          void Flash_Chip_Erase(void)
 185          {
 186   1          SS_PIN = 0;
 187   1          SPDR = CHIP_ERASE;
 188   1          while((SPSR&0x80)==0x00);
 189   1          clr_SPIF;
 190   1          SS_PIN = 1;    
 191   1      }
 192          //--------------------------------------------------------------------------------------------------------
             ----
 193          void Flash_Read_Status(void)
 194          {
 195   1          UINT8 u8Status;
 196   1      
 197   1          SS_PIN = 0;
 198   1          do{
 199   2              SPDR = READ_STATUS1;
 200   2              while((SPSR&0x80)==0x00);
 201   2              clr_SPIF;
 202   2          
 203   2              SPDR = 0xFF;
 204   2              while((SPSR&0x80)==0x00);
 205   2              u8Status = SPDR;
 206   2              clr_SPIF;
 207   2          }while((u8Status&0x01)==0x01);
 208   1          SS_PIN = 1;    
 209   1      }
 210          //--------------------------------------------------------------------------------------------------------
             ----
 211          void Flash_Erase_Verify(void)
 212          {
 213   1          UINT16 u16CNT;    
 214   1          UINT8  u8Data;
 215   1      
 216   1          SS_PIN = 0;
 217   1      
 218   1          SPDR = READ_DATA;
 219   1          while((SPSR&0x80)==0x00);
 220   1          clr_SPIF;
 221   1      
 222   1          /* 24-bit Address */
 223   1          SPDR = 0x00;
C51 COMPILER V9.52.0.0   SPI_FLASH                                                         09/01/2016 17:27:30 PAGE 5   

 224   1          while((SPSR&0x80)==0x00);
 225   1          clr_SPIF;
 226   1      
 227   1          SPDR = 0x00;
 228   1          while((SPSR&0x80)==0x00);
 229   1          clr_SPIF;
 230   1      
 231   1          SPDR = 0x00;
 232   1          while((SPSR&0x80)==0x00);
 233   1          clr_SPIF;
 234   1      
 235   1          for(u16CNT=0;u16CNT<256;u16CNT++)
 236   1          {
 237   2              SPDR = 0x00;
 238   2              while((SPSR&0x80)==0x00);
 239   2              u8Data = SPDR;
 240   2              clr_SPIF;
 241   2              if(u8Data != 0xFF)
 242   2              {
 243   3                  SPI_Error();
 244   3              }
 245   2          }
 246   1      
 247   1          SS_PIN = 1; 
 248   1      }
 249          //--------------------------------------------------------------------------------------------------------
             ----
 250          void Flash_Program(void)
 251          {
 252   1          UINT16 u16CNT; 
 253   1          
 254   1          SS_PIN = 0;
 255   1      
 256   1          SPDR = PAGE_PROGRAM;
 257   1          while((SPSR&0x80)==0x00);
 258   1          clr_SPIF;
 259   1      
 260   1          /* 24-bit Address */
 261   1          SPDR = 0x00;
 262   1          while((SPSR&0x80)==0x00);
 263   1          clr_SPIF;
 264   1      
 265   1          SPDR = 0x00;
 266   1          while((SPSR&0x80)==0x00);
 267   1          clr_SPIF;
 268   1      
 269   1          SPDR = 0x00;
 270   1          while((SPSR&0x80)==0x00);
 271   1          clr_SPIF;
 272   1      
 273   1          /* Send the data to SPI_Flash buffer */
 274   1          for(u16CNT=0;u16CNT<256;u16CNT++)
 275   1          {
 276   2              SPDR = (UINT8)u16CNT;
 277   2              while((SPSR&0x80)==0x00);
 278   2              clr_SPIF;
 279   2          }
 280   1          
 281   1          SS_PIN = 1;    
 282   1      }
 283          //--------------------------------------------------------------------------------------------------------
             ----
C51 COMPILER V9.52.0.0   SPI_FLASH                                                         09/01/2016 17:27:30 PAGE 6   

 284          void Flash_Program_Verify(void)
 285          {
 286   1          UINT16 u16CNT;    
 287   1          UINT8  u8Data;
 288   1      
 289   1          SS_PIN = 0;
 290   1      
 291   1          SPDR = READ_DATA;
 292   1          while((SPSR&0x80)==0x00);
 293   1          clr_SPIF;
 294   1      
 295   1          /* 24-bit Address */
 296   1          SPDR = 0x00;
 297   1          while((SPSR&0x80)==0x00);
 298   1          clr_SPIF;
 299   1      
 300   1          SPDR = 0x00;
 301   1          while((SPSR&0x80)==0x00);
 302   1          clr_SPIF;
 303   1      
 304   1          SPDR = 0x00;
 305   1          while((SPSR&0x80)==0x00);
 306   1          clr_SPIF;
 307   1      
 308   1          for(u16CNT=0;u16CNT<256;u16CNT++)
 309   1          {
 310   2              SPDR = 0x00;
 311   2              while((SPSR&0x80)==0x00);
 312   2              u8Data = SPDR;
 313   2              clr_SPIF;
 314   2              if(u8Data != (UINT8)u16CNT)
 315   2              {
 316   3                  SPI_Error();
 317   3              }
 318   2          }
 319   1      
 320   1          SS_PIN = 1; 
 321   1      }
 322          //--------------------------------------------------------------------------------------------------------
             ----
 323          void main(void)
 324          {      
 325   1          UINT8 u8MID,u8DID;
 326   1      
 327   1           Set_All_GPIO_Quasi_Mode;
 328   1          InitialUART0_Timer1(115200);
 329   1       
 330   1          SPI_Initial();
 331   1      
 332   1          Read_MID_DID(&u8MID,&u8DID);
 333   1      
 334   1          printf ("\n*  MID value of W25Q16BV = 0x%X",(UINT16)u8MID);
 335   1          printf ("\n*  DID value of W25Q16BV = 0x%X",(UINT16)u8DID);
 336   1      
 337   1          if((u8MID != 0xEF)&&(u8DID != 0x17))
 338   1          {
 339   2              SPI_Error();
 340   2          }
 341   1      
 342   1          /* The procedure of SPI Flash at erase mode */
 343   1          Flash_Write_Enable();
 344   1          Flash_Chip_Erase();
C51 COMPILER V9.52.0.0   SPI_FLASH                                                         09/01/2016 17:27:30 PAGE 7   

 345   1          Flash_Read_Status();
 346   1          Flash_Write_Disable();
 347   1          
 348   1          Flash_Erase_Verify();
 349   1      
 350   1          /* The procedure of SPI Flash at program mode */
 351   1          Flash_Write_Enable();
 352   1          Flash_Program();
 353   1          Flash_Read_Status();
 354   1          Flash_Write_Disable();
 355   1      
 356   1          /* Program verify */
 357   1          Flash_Program_Verify();
 358   1      
 359   1          printf("\nFinished the SPI Demo Code and test pass!!!\n");
 360   1          while(1);
 361   1      }
 362          //--------------------------------------------------------------------------------------------------------
             ----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    590    ----
   CONSTANT SIZE    =    181    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
