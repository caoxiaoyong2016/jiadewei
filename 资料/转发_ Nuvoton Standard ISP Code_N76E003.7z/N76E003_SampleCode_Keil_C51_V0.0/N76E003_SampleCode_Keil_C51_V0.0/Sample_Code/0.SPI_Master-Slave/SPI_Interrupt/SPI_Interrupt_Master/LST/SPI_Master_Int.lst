C51 COMPILER V9.51   SPI_MASTER_INT                                                        01/07/2015 20:26:42 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE SPI_MASTER_INT
OBJECT MODULE PLACED IN .\Output\SPI_Master_Int.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\SPI_Master_Int.c BROWSE INCDIR(..\..\..\..\Include) DEFINE(FOSC_221184
                    -) DEBUG OBJECTEXTEND PRINT(.\LST\SPI_Master_Int.lst) OBJECT(.\Output\SPI_Master_Int.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2015 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp. 
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Jan/07/2015
  12          //********************************************************************************************************
             -***
  13          
  14          //********************************************************************************************************
             -***
  15          //  File Function: N76E885 SPI in Master mode demo code
  16          //********************************************************************************************************
             -***
  17          
  18          #include <stdio.h>
  19          #include "N76E885.h"
  20          #include "Version.h"
  21          #include "Typedef.h"
  22          #include "Define.h"
  23          #include "SFR_Macro.h"
  24          #include "Common.h"
  25          #include "Delay.h"
  26          
  27          //********************************************************************************************************
             -***
  28          //  Application: SPI Function 
  29          //  Master send 0x90 and recevie 0x4E
  30          //  Master send 0x01 and recevie 0x55
  31          //  Master send 0x02 and recevie 0x56
  32          //  Master send 0x03 and recevie 0x4F
  33          //  Master send 0x04 and recevie 0x54
  34          //
  35          //  Master recevie 0x4E and 0x4F form slave after transmitting
  36          //
  37          //  Output : P1.4 & P2.1 flash when SPI pass
  38          //           UART show result on hyper-terminal
  39          //           P0.7 flash when SPI error
  40          //********************************************************************************************************
             -***
  41          
  42          /*
  43          //-------- <<< Use Configuration Wizard in Context Menu >>> ------------
C51 COMPILER V9.51   SPI_MASTER_INT                                                        01/07/2015 20:26:42 PAGE 2   

  44          //
  45          ////<e0> System Clock Source Configuration
  46          // <o1> System Clock Source Selection
  47          //      <0=> 2~25MHz    XTAL
  48          //      <1=> 32.768KHz  XTAL
  49          //      <2=> 22.1184MHz Internal
  50          //      <3=> 10KHz      Internal
  51          //      <4=> OSC-In     External
  52          //</e>
  53          //
  54          //<e2> Clock Divider Configuration
  55          //     <o3.0..7>  System Clock Source Devider <1-255>
  56          //                     <i> Fsys = (System Clock Source) / (2 * Devider)
  57          //</e>
  58          //
  59          //-------- <<< end of configuration section >>> ------------------------------
  60          */
  61          
  62          #define SYS_CLK_EN              0
  63          #define SYS_SEL                 2
  64          #define SYS_DIV_EN              0                   //0: Fsys=Fosc, 1: Fsys = Fosc/(2*CKDIV)
  65          #define SYS_DIV                 1
  66          #define SPI_DIV                 0
  67          bit BIT_TMP;
  68          //--------------------------------------------------------------------------------------------------------
             ----
  69          void SPI_Error(void)
  70          {
  71   1          printf ("\nSPI error.\n");
  72   1          while(1)                                    // SPI error and P0.7 flash/
  73   1          {
  74   2              P07 = 1;
  75   2              Timer0_Delay1ms(500);
  76   2              P07 = 0;
  77   2              Timer0_Delay1ms(500);
  78   2          }
  79   1      }
  80          //--------------------------------------------------------------------------------------------------------
             ----
  81          void Enable_SPI_Interrupt(void)
  82          {
  83   1          set_ESPI;                                   // Enable SPI interrupt
  84   1          set_EA;
  85   1      }
  86          //--------------------------------------------------------------------------------------------------------
             ----
  87          void SPI_Clock_Select(void)
  88          {
  89   1          #if   SPI_DIV == 0
  90   1                  clr_SPR0;                           // SPI clock = Fosc/4
  91   1                  clr_SPR1;
  92   1          #elif SPI_DIV == 1
                          set_SPR0;                           // SPI clock = Fosc/8
                          clr_SPR1;
                  #elif SPI_DIV == 2
                          clr_SPR0;                           // SPI clock = Fosc/16
                          set_SPR1; 
                  #elif SPI_DIV == 3
                          set_SPR0;                           // SPI clock = Fosc/32
                          set_SPR1;
                  #endif
 102   1      }
C51 COMPILER V9.51   SPI_MASTER_INT                                                        01/07/2015 20:26:42 PAGE 3   

 103          //--------------------------------------------------------------------------------------------------------
             ----
 104          void SPI_Initial(void)
 105          {              
 106   1          clr_P0M1_4;                                 //P04 (SS) Quasi mode
 107   1          clr_P0M2_4;
 108   1          
 109   1          clr_P0M1_5;                                 //P05 (SPCLK) Quasi mode
 110   1          clr_P0M2_5;
 111   1          
 112   1          clr_P2M1_1;                                 //P21 (MOSI) Quasi mode
 113   1          clr_P2M2_1;
 114   1          
 115   1          clr_P2M1_2;                                 //P22 (MISO) Quasi mode
 116   1          clr_P2M2_2;
 117   1                  
 118   1          set_DISMODF;                                // SS General purpose I/O ( No Mode Fault ) 
 119   1          clr_SSOE;
 120   1         
 121   1          clr_LSBFE;                                  // MSB first         
 122   1      
 123   1          clr_CPOL;                                   // The SPI clock is low in idle mode
 124   1          set_CPHA;                                   // The data is sample on the second edge of SPI clock 
 125   1          
 126   1          set_MSTR;                                   // SPI in Master mode 
 127   1           
 128   1          SPI_Clock_Select();                         // Select SPI clock
 129   1          Enable_SPI_Interrupt();                     // Enable SPI interrupt
 130   1          set_SPIEN;                                  // Enable SPI function 
 131   1      }
 132          //--------------------------------------------------------------------------------------------------------
             ----
 133          void Start_Sending_SPI(UINT8 *pu8MID,UINT8 *pu8DID)
 134          {
 135   1          SS = 0;
 136   1      
 137   1          SPDR = 0x90;                                // Send 0x90 to Slave 
 138   1          PCON |= SET_BIT0;                           // Enter idle mode
 139   1          if(SPDR != 0x4E)                            // Receive slave 1st DATA 
 140   1             SPI_Error(); 
 141   1          printf ("\nSlave Return %c!\n",SPDR);
 142   1                                                
 143   1          SPDR = 0x01;                                // Send 0x01 to Slave 
 144   1          PCON |= SET_BIT0;                           // Enter idle mode
 145   1          if(SPDR != 0x55)                            // Receive slave 2nd DATA  
 146   1             SPI_Error();
 147   1          printf ("\nSlave Return %c!\n",SPDR);
 148   1      
 149   1          SPDR = 0x02;                                // Send 0x02 to Slave 
 150   1          PCON |= SET_BIT0;                           // Enter idle mode
 151   1          if(SPDR != 0x56)                            // Receive slave 3rd DATA 
 152   1             SPI_Error();
 153   1          printf ("\nSlave Return %c!\n",SPDR);
 154   1      
 155   1          SPDR = 0x03;                                // Send 0x03 to Slave 
 156   1          PCON |= SET_BIT0;                           // Enter idle mode
 157   1          if(SPDR != 0x4F)                            // Receive slave 4th DATA
 158   1             SPI_Error();
 159   1          printf ("\nSlave Return %c!\n",SPDR);
 160   1      
 161   1          SPDR = 0x04;                                // Send 0x04 to Slave 
 162   1          PCON |= SET_BIT0;                           // Enter idle mode
C51 COMPILER V9.51   SPI_MASTER_INT                                                        01/07/2015 20:26:42 PAGE 4   

 163   1          if(SPDR != 0x54)                            // Receive slave 5th DATA 
 164   1             SPI_Error();
 165   1          printf ("\nSlave Return %c!\n",SPDR);
 166   1      
 167   1          SPDR = 0x4F;                   
 168   1          PCON |= SET_BIT0;                           // Enter idle mode
 169   1          *pu8MID = SPDR;                             // Receive Slave 1st DATA fron Slave       
 170   1          printf ("\nSlave Return %c!\n",SPDR);
 171   1      
 172   1          SPDR = 0x4E;                   
 173   1          PCON |= SET_BIT0;                           // Enter idle mode             
 174   1          *pu8DID = SPDR;                             // Receive Slave 2nd DATA from Slave 
 175   1          printf ("\nSlave Return %c!\n",SPDR);
 176   1      
 177   1          SS = 1;    
 178   1      }
 179          //--------------------------------------------------------------------------------------------------------
             ----
 180          void main(void)
 181          {      
 182   1          UINT8 u8MID,u8DID;
 183   1          
 184   1          /* Note
 185   1             MCU power on system clock is HIRC (22.1184MHz), so Fsys = 22.1184MHz
 186   1          */
 187   1          
 188   1          Set_All_GPIO_Quasi_Mode();
 189   1          InitialUART0_Timer1_Type1(9600);             /* 9600 Baud Rate*/
 190   1      
 191   1          Show_FW_Version_Number_To_PC();
 192   1      
 193   1          printf ("\n*===================================================================");
 194   1          printf ("\n*  Name: N76E885 SPI Master(Interrupt) Demo Code.");
 195   1          printf ("\n*===================================================================");  
 196   1              
 197   1          /* Change system closk source */
 198   1          #if SYS_CLK_EN == 1
                      #if   SYS_SEL == 0
                          System_Clock_Select(E_HXTEN);   //Fosc = 2~25MHz XTAL
                      #elif SYS_SEL == 1
                          System_Clock_Select(E_LXTEN);   //Fosc = 32.768KHz XTAL
                      #elif SYS_SEL == 2
                          System_Clock_Select(E_HIRCEN);  //Fosc = 22.1184MHz Internal RC
                      #elif SYS_SEL == 3
                          System_Clock_Select(E_LIRCEN);  //Fosc = 10KHz Internal RC
                      #elif SYS_SEL == 4
                          System_Clock_Select(E_OSCEN);   //Fosc = OSC-In External OSC
                      #endif
                  #endif
 211   1          
 212   1          #if SYS_DIV_EN == 1
                      CKDIV = SYS_DIV;                        //Fsys = Fosc / (2* CLKDIV) = Fcpu
                  #endif
 215   1          
 216   1          SPI_Initial();
 217   1      
 218   1          printf ("\nSPI Start Transmit...\n");
 219   1      
 220   1          Start_Sending_SPI(&u8MID,&u8DID);
 221   1              
 222   1          if((u8MID != 0x4F)&&(u8DID != 0x4E))
 223   1              SPI_Error();
C51 COMPILER V9.51   SPI_MASTER_INT                                                        01/07/2015 20:26:42 PAGE 5   

 224   1      
 225   1          printf ("\nSPI Test OK!\n");
 226   1          while(1)                                    // SPI transmission finish
 227   1          {
 228   2              P02 = 1;
 229   2              Timer0_Delay1ms(500);
 230   2              P02 = 0;
 231   2              Timer0_Delay1ms(500);
 232   2          }
 233   1      }
 234          //--------------------------------------------------------------------------------------------------------
             ----
 235          void SPI_ISR(void) interrupt 9                  // Vecotr @  0x4B
 236          {
 237   1          clr_SPIF;
 238   1          Delay10us(1); 
 239   1      }
 240          //--------------------------------------------------------------------------------------------------------
             ----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    498    ----
   CONSTANT SIZE    =    192    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
