C51 COMPILER V9.51   SPI_SLAVE_INT                                                         01/07/2015 20:26:44 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE SPI_SLAVE_INT
OBJECT MODULE PLACED IN .\Output\SPI_Slave_Int.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\SPI_Slave_Int.c BROWSE INCDIR(..\..\..\..\Include) DEFINE(FOSC_221184)
                    - DEBUG OBJECTEXTEND PRINT(.\LST\SPI_Slave_Int.lst) OBJECT(.\Output\SPI_Slave_Int.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2015 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp. 
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Jan/07/2015
  12          //********************************************************************************************************
             -***
  13          
  14          //********************************************************************************************************
             -***
  15          //  File Function: N76E885 SPI in Salave mode demo code
  16          //********************************************************************************************************
             -***
  17          
  18          #include <stdio.h>
  19          #include "N76E885.h"
  20          #include "Version.h"
  21          #include "Typedef.h"
  22          #include "Define.h"
  23          #include "SFR_Macro.h"
  24          #include "Common.h"
  25          #include "Delay.h"
  26          
  27          //********************************************************************************************************
             -***
  28          //  Application: SPI Function 
  29          //  Slave receive 0x90 and return 0x4E
  30          //  Slave receive 0x01 and return 0x55
  31          //  Slave receive 0x02 and return 0x56
  32          //  Slave receive 0x03 and return 0x4F
  33          //  Slave receive 0x04 and return 0x54
  34          //
  35          //  Slave send 0x4F and 0x4E to Master after receiving
  36          //  
  37          //  Output : P1.4 & P2.1 flash when SPI pass.
  38          //           P0.7 flash when SPI error 
  39          //********************************************************************************************************
             -***
  40          
  41          /*
  42          //-------- <<< Use Configuration Wizard in Context Menu >>> ------------
  43          //
C51 COMPILER V9.51   SPI_SLAVE_INT                                                         01/07/2015 20:26:44 PAGE 2   

  44          ////<e0> System Clock Source Configuration
  45          // <o1> System Clock Source Selection
  46          //      <0=> 2~25MHz    XTAL
  47          //      <1=> 32.768KHz  XTAL
  48          //      <2=> 22.1184MHz Internal
  49          //      <3=> 10KHz      Internal
  50          //      <4=> OSC-In     External
  51          //</e>
  52          //
  53          //<e2> Clock Divider Configuration
  54          //     <o3.0..7>  System Clock Source Devider <1-255>
  55          //                     <i> Fsys = (System Clock Source) / (2 * Devider)
  56          //</e>
  57          //
  58          //-------- <<< end of configuration section >>> ------------------------------
  59          */
  60          
  61          #define SYS_CLK_EN              0
  62          #define SYS_SEL                 2
  63          #define SYS_DIV_EN              0                   //0: Fsys=Fosc, 1: Fsys = Fosc/(2*CKDIV)
  64          #define SYS_DIV                 1
  65          
  66          UINT8   u8Receive_Data[5];
  67          UINT16  u16CNT = 0;
  68          BIT     SPI_Send_Flag = 0;
  69          bit     BIT_TMP;
  70          //--------------------------------------------------------------------------------------------------------
             ----
  71          void SPI_Error(void)
  72          {
  73   1          while(1)                                    // SPI error and P0.7 flash/
  74   1          {
  75   2              P07 = 1;
  76   2              Timer0_Delay1ms(500);
  77   2              P07 = 0;
  78   2              Timer0_Delay1ms(500);
  79   2          }
  80   1      }
  81          //--------------------------------------------------------------------------------------------------------
             ----
  82          void Enable_SPI_Interrupt(void)
  83          {
  84   1          set_ESPI;                                   // Enable SPI interrupt
  85   1          set_EA;
  86   1      }
  87          //--------------------------------------------------------------------------------------------------------
             ----
  88          void SPI_Initial(void)
  89          { 
  90   1          clr_P0M1_4;                                 //P04 (SS) Quasi mode
  91   1          clr_P0M2_4;
  92   1          
  93   1          clr_P0M1_5;                                 //P05 (SPCLK) Quasi mode
  94   1          clr_P0M2_5;
  95   1          
  96   1          clr_P2M1_1;                                 //P21 (MOSI) Quasi mode
  97   1          clr_P2M2_1;
  98   1          
  99   1          clr_P2M1_2;                                 //P22 (MISO) Quasi mode
 100   1          clr_P2M2_2;
 101   1      
 102   1          clr_MSTR;                                   // SPI in Slave mode 
C51 COMPILER V9.51   SPI_SLAVE_INT                                                         01/07/2015 20:26:44 PAGE 3   

 103   1          clr_LSBFE;                                  // MSB first 
 104   1      
 105   1          clr_CPOL;                                   // The SPI clock is low in idle mode
 106   1          set_CPHA;                                   // The data is sample on the second edge of SPI clock     
 107   1             
 108   1          Enable_SPI_Interrupt();                     // Enable SPI interrupt
 109   1          set_SPIEN;                                  // Enable SPI function
 110   1          
 111   1          clr_SPIF;                                   // Clear SPI flag
 112   1      }
 113          //--------------------------------------------------------------------------------------------------------
             ----
 114          void Slave_Receive_Data(void)
 115          {
 116   1          SPDR = 0x4E;                             
 117   1          PCON |= SET_BIT0;                           // Enter idle mode 
 118   1          if(u8Receive_Data[0] != 0x90)               // Receive 1st DATA form master 
 119   1              SPI_Error(); 
 120   1                
 121   1          SPDR = 0x55;
 122   1          PCON |= SET_BIT0;                           // Enter idle mode                       
 123   1          if(u8Receive_Data[1] != 0x01)               // Receive 2nd DATA form master 
 124   1              SPI_Error();
 125   1      
 126   1          SPDR = 0x56;
 127   1          PCON |= SET_BIT0;                           // Enter idle mode
 128   1          if(u8Receive_Data[2] != 0x02)               // Receive 3rd DATA form master 
 129   1              SPI_Error();
 130   1      
 131   1          SPDR = 0x4F;
 132   1          PCON |= SET_BIT0;                           // Enter idle mode
 133   1          if(u8Receive_Data[3] != 0x03)               // Receive 4th DATA form master 
 134   1              SPI_Error();
 135   1      
 136   1          SPDR = 0x54;
 137   1          PCON |= SET_BIT0;                           // Enter idle mode
 138   1          if(u8Receive_Data[4] != 0x04)               // Receive 5th DATA form master 
 139   1              SPI_Error();
 140   1      }
 141          //--------------------------------------------------------------------------------------------------------
             ----
 142          void Slave_Transmit_Data(void)
 143          {
 144   1          SPI_Send_Flag = 1;
 145   1          SPDR = 0x4F;                                // Send 1st data (04F) to Master
 146   1          PCON |= SET_BIT0;                           // Enter idle mode       
 147   1      
 148   1          SPI_Send_Flag = 1;
 149   1          SPDR = 0x4E;                                // Send 2nd data (0x4E) to Master 
 150   1          PCON |= SET_BIT0;                           // Enter idle mode
 151   1      }
 152          //--------------------------------------------------------------------------------------------------------
             ----
 153          void main(void)
 154          {   
 155   1          /* Note
 156   1             MCU power on system clock is HIRC (22.1184MHz), so Fsys = 22.1184MHz
 157   1          */
 158   1          
 159   1          Set_All_GPIO_Quasi_Mode();
 160   1          InitialUART0_Timer1_Type1(9600);             /* 9600 Baud Rate*/
 161   1      
C51 COMPILER V9.51   SPI_SLAVE_INT                                                         01/07/2015 20:26:44 PAGE 4   

 162   1          Show_FW_Version_Number_To_PC();
 163   1      
 164   1          printf ("\n*===================================================================");
 165   1          printf ("\n*  Name: N76E885 Series SPI Slave(Interrupt) Demo Code.");
 166   1          printf ("\n*===================================================================");  
 167   1              
 168   1          /* Change system closk source */
 169   1          #if SYS_CLK_EN == 1
                      #if   SYS_SEL == 0
                          System_Clock_Select(E_HXTEN);   //Fosc = 2~25MHz XTAL
                      #elif SYS_SEL == 1
                          System_Clock_Select(E_LXTEN);   //Fosc = 32.768KHz XTAL
                      #elif SYS_SEL == 2
                          System_Clock_Select(E_HIRCEN);  //Fosc = 22.1184MHz Internal RC
                      #elif SYS_SEL == 3
                          System_Clock_Select(E_LIRCEN);  //Fosc = 10KHz Internal RC
                      #elif SYS_SEL == 4
                          System_Clock_Select(E_OSCEN);   //Fosc = OSC-In External OSC
                      #endif
                  #endif
 182   1          
 183   1          #if SYS_DIV_EN == 1
                      CKDIV = SYS_DIV;                        //Fsys = Fosc / (2* CLKDIV) = Fcpu
                  #endif
 186   1          
 187   1          SPI_Initial();
 188   1      
 189   1          printf ("\nSPI Start Receive...\n");
 190   1      
 191   1          Slave_Receive_Data();                       // Slave receive data from master
 192   1          Slave_Transmit_Data();                      // Slave transmit data to master
 193   1      
 194   1          clr_ESPI;
 195   1          SPDR = 0x00;
 196   1          printf ("\nSPI Test OK!\n");
 197   1          while(1)                                    // SPI transmission finish
 198   1          {
 199   2              P02 = 1;
 200   2              Timer0_Delay1ms(500);
 201   2              P02 = 0;
 202   2              Timer0_Delay1ms(500);
 203   2          }
 204   1      }
 205          //--------------------------------------------------------------------------------------------------------
             ----
 206          void SPI_ISR(void) interrupt 9                  // Vecotr @  0x4B
 207          {
 208   1          clr_SPIF;                                   
 209   1          if(!SPI_Send_Flag)
 210   1          {       
 211   2              u8Receive_Data[u16CNT] = SPDR;
 212   2              u16CNT ++;
 213   2          }
 214   1          SPI_Send_Flag = 0; 
 215   1      }
 216          //--------------------------------------------------------------------------------------------------------
             ----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    317    ----
   CONSTANT SIZE    =    165    ----
C51 COMPILER V9.51   SPI_SLAVE_INT                                                         01/07/2015 20:26:44 PAGE 5   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
